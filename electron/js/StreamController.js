//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

cn.ac.trimps.liproxy.service.StreamController_bind_args = function(args) {
  this.handler = null;
  this.address = null;
  this.port = null;
  this.mode = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    }
    if (args.mode !== undefined && args.mode !== null) {
      this.mode = args.mode;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_bind_args.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_bind_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.mode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_bind_args.prototype.write = function(output) {
  output.writeStructBegin('StreamController_bind_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 3);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  if (this.mode !== null && this.mode !== undefined) {
    output.writeFieldBegin('mode', Thrift.Type.I32, 4);
    output.writeI32(this.mode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_bind_result = function(args) {
  this.success = null;
  this.ie = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_bind_result.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_bind_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_bind_result.prototype.write = function(output) {
  output.writeStructBegin('StreamController_bind_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_play_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_play_args.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_play_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_play_args.prototype.write = function(output) {
  output.writeStructBegin('StreamController_play_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_play_result = function(args) {
  this.ie = null;
  this.pye = null;
  this.ple = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProxyException) {
    this.pye = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProtocolException) {
    this.ple = args;
    return;
  }
  if (args) {
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.pye !== undefined && args.pye !== null) {
      this.pye = args.pye;
    }
    if (args.ple !== undefined && args.ple !== null) {
      this.ple = args.ple;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_play_result.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_play_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pye = new cn.ac.trimps.liproxy.service.ProxyException();
        this.pye.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ple = new cn.ac.trimps.liproxy.service.ProtocolException();
        this.ple.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_play_result.prototype.write = function(output) {
  output.writeStructBegin('StreamController_play_result');
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.pye !== null && this.pye !== undefined) {
    output.writeFieldBegin('pye', Thrift.Type.STRUCT, 2);
    this.pye.write(output);
    output.writeFieldEnd();
  }
  if (this.ple !== null && this.ple !== undefined) {
    output.writeFieldBegin('ple', Thrift.Type.STRUCT, 3);
    this.ple.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_playback_args = function(args) {
  this.handler = null;
  this.startTime = null;
  this.endTime = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = new cn.ac.trimps.liproxy.service.DateTime(args.startTime);
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = new cn.ac.trimps.liproxy.service.DateTime(args.endTime);
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_playback_args.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_playback_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.startTime = new cn.ac.trimps.liproxy.service.DateTime();
        this.startTime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.endTime = new cn.ac.trimps.liproxy.service.DateTime();
        this.endTime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_playback_args.prototype.write = function(output) {
  output.writeStructBegin('StreamController_playback_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRUCT, 2);
    this.startTime.write(output);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRUCT, 3);
    this.endTime.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_playback_result = function(args) {
  this.ie = null;
  this.pye = null;
  this.ple = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProxyException) {
    this.pye = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProtocolException) {
    this.ple = args;
    return;
  }
  if (args) {
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.pye !== undefined && args.pye !== null) {
      this.pye = args.pye;
    }
    if (args.ple !== undefined && args.ple !== null) {
      this.ple = args.ple;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_playback_result.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_playback_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pye = new cn.ac.trimps.liproxy.service.ProxyException();
        this.pye.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ple = new cn.ac.trimps.liproxy.service.ProtocolException();
        this.ple.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_playback_result.prototype.write = function(output) {
  output.writeStructBegin('StreamController_playback_result');
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.pye !== null && this.pye !== undefined) {
    output.writeFieldBegin('pye', Thrift.Type.STRUCT, 2);
    this.pye.write(output);
    output.writeFieldEnd();
  }
  if (this.ple !== null && this.ple !== undefined) {
    output.writeFieldBegin('ple', Thrift.Type.STRUCT, 3);
    this.ple.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_download_args = function(args) {
  this.handler = null;
  this.startTime = null;
  this.endTime = null;
  this.downloadspeed = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = new cn.ac.trimps.liproxy.service.DateTime(args.startTime);
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = new cn.ac.trimps.liproxy.service.DateTime(args.endTime);
    }
    if (args.downloadspeed !== undefined && args.downloadspeed !== null) {
      this.downloadspeed = args.downloadspeed;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_download_args.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_download_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.startTime = new cn.ac.trimps.liproxy.service.DateTime();
        this.startTime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.endTime = new cn.ac.trimps.liproxy.service.DateTime();
        this.endTime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.downloadspeed = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_download_args.prototype.write = function(output) {
  output.writeStructBegin('StreamController_download_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRUCT, 2);
    this.startTime.write(output);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRUCT, 3);
    this.endTime.write(output);
    output.writeFieldEnd();
  }
  if (this.downloadspeed !== null && this.downloadspeed !== undefined) {
    output.writeFieldBegin('downloadspeed', Thrift.Type.I32, 4);
    output.writeI32(this.downloadspeed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_download_result = function(args) {
  this.ie = null;
  this.pye = null;
  this.ple = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProxyException) {
    this.pye = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProtocolException) {
    this.ple = args;
    return;
  }
  if (args) {
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.pye !== undefined && args.pye !== null) {
      this.pye = args.pye;
    }
    if (args.ple !== undefined && args.ple !== null) {
      this.ple = args.ple;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_download_result.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_download_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pye = new cn.ac.trimps.liproxy.service.ProxyException();
        this.pye.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ple = new cn.ac.trimps.liproxy.service.ProtocolException();
        this.ple.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_download_result.prototype.write = function(output) {
  output.writeStructBegin('StreamController_download_result');
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.pye !== null && this.pye !== undefined) {
    output.writeFieldBegin('pye', Thrift.Type.STRUCT, 2);
    this.pye.write(output);
    output.writeFieldEnd();
  }
  if (this.ple !== null && this.ple !== undefined) {
    output.writeFieldBegin('ple', Thrift.Type.STRUCT, 3);
    this.ple.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_queryRecord_args = function(args) {
  this.handler = null;
  this.startTime = null;
  this.endTime = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = new cn.ac.trimps.liproxy.service.DateTime(args.startTime);
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = new cn.ac.trimps.liproxy.service.DateTime(args.endTime);
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_queryRecord_args.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_queryRecord_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.startTime = new cn.ac.trimps.liproxy.service.DateTime();
        this.startTime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.endTime = new cn.ac.trimps.liproxy.service.DateTime();
        this.endTime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_queryRecord_args.prototype.write = function(output) {
  output.writeStructBegin('StreamController_queryRecord_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRUCT, 2);
    this.startTime.write(output);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRUCT, 3);
    this.endTime.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_queryRecord_result = function(args) {
  this.success = null;
  this.ie = null;
  this.pye = null;
  this.ple = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProxyException) {
    this.pye = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProtocolException) {
    this.ple = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.pye !== undefined && args.pye !== null) {
      this.pye = args.pye;
    }
    if (args.ple !== undefined && args.ple !== null) {
      this.ple = args.ple;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_queryRecord_result.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_queryRecord_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pye = new cn.ac.trimps.liproxy.service.ProxyException();
        this.pye.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ple = new cn.ac.trimps.liproxy.service.ProtocolException();
        this.ple.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_queryRecord_result.prototype.write = function(output) {
  output.writeStructBegin('StreamController_queryRecord_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.pye !== null && this.pye !== undefined) {
    output.writeFieldBegin('pye', Thrift.Type.STRUCT, 2);
    this.pye.write(output);
    output.writeFieldEnd();
  }
  if (this.ple !== null && this.ple !== undefined) {
    output.writeFieldBegin('ple', Thrift.Type.STRUCT, 3);
    this.ple.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_stop_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_stop_args.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_stop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_stop_args.prototype.write = function(output) {
  output.writeStructBegin('StreamController_stop_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_stop_result = function(args) {
  this.ie = null;
  this.pe = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProtocolException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_stop_result.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_stop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new cn.ac.trimps.liproxy.service.ProtocolException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_stop_result.prototype.write = function(output) {
  output.writeStructBegin('StreamController_stop_result');
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 2);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_pause_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_pause_args.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_pause_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_pause_args.prototype.write = function(output) {
  output.writeStructBegin('StreamController_pause_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_pause_result = function(args) {
  this.ie = null;
  this.pe = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProtocolException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_pause_result.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_pause_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new cn.ac.trimps.liproxy.service.ProtocolException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_pause_result.prototype.write = function(output) {
  output.writeStructBegin('StreamController_pause_result');
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 2);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_resume_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_resume_args.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_resume_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_resume_args.prototype.write = function(output) {
  output.writeStructBegin('StreamController_resume_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_resume_result = function(args) {
  this.ie = null;
  this.pe = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProtocolException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_resume_result.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_resume_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new cn.ac.trimps.liproxy.service.ProtocolException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_resume_result.prototype.write = function(output) {
  output.writeStructBegin('StreamController_resume_result');
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 2);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_broadcast_args = function(args) {
  this.handler = null;
  this.filename = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_broadcast_args.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_broadcast_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_broadcast_args.prototype.write = function(output) {
  output.writeStructBegin('StreamController_broadcast_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 2);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_broadcast_result = function(args) {
  this.ie = null;
  this.pe = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProtocolException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_broadcast_result.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_broadcast_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new cn.ac.trimps.liproxy.service.ProtocolException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_broadcast_result.prototype.write = function(output) {
  output.writeStructBegin('StreamController_broadcast_result');
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 2);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_setScale_args = function(args) {
  this.handler = null;
  this.scale = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.scale !== undefined && args.scale !== null) {
      this.scale = args.scale;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_setScale_args.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_setScale_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.scale = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_setScale_args.prototype.write = function(output) {
  output.writeStructBegin('StreamController_setScale_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.scale !== null && this.scale !== undefined) {
    output.writeFieldBegin('scale', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.scale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_setScale_result = function(args) {
  this.ie = null;
  this.pe = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProtocolException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_setScale_result.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_setScale_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new cn.ac.trimps.liproxy.service.ProtocolException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_setScale_result.prototype.write = function(output) {
  output.writeStructBegin('StreamController_setScale_result');
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 2);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_setRange_args = function(args) {
  this.handler = null;
  this.range = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.range !== undefined && args.range !== null) {
      this.range = args.range;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_setRange_args.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_setRange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.range = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_setRange_args.prototype.write = function(output) {
  output.writeStructBegin('StreamController_setRange_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.I32, 2);
    output.writeI32(this.range);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_setRange_result = function(args) {
  this.ie = null;
  this.pe = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProtocolException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_setRange_result.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_setRange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new cn.ac.trimps.liproxy.service.ProtocolException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_setRange_result.prototype.write = function(output) {
  output.writeStructBegin('StreamController_setRange_result');
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 2);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_sendIFrame_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_sendIFrame_args.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_sendIFrame_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_sendIFrame_args.prototype.write = function(output) {
  output.writeStructBegin('StreamController_sendIFrame_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_sendIFrame_result = function(args) {
  this.ie = null;
  this.pe = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProtocolException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_sendIFrame_result.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_sendIFrame_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new cn.ac.trimps.liproxy.service.ProtocolException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_sendIFrame_result.prototype.write = function(output) {
  output.writeStructBegin('StreamController_sendIFrame_result');
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 2);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_startRecord_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_startRecord_args.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_startRecord_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_startRecord_args.prototype.write = function(output) {
  output.writeStructBegin('StreamController_startRecord_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_startRecord_result = function(args) {
  this.ie = null;
  this.pe = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProtocolException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_startRecord_result.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_startRecord_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new cn.ac.trimps.liproxy.service.ProtocolException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_startRecord_result.prototype.write = function(output) {
  output.writeStructBegin('StreamController_startRecord_result');
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 2);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_stopRecord_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_stopRecord_args.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_stopRecord_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_stopRecord_args.prototype.write = function(output) {
  output.writeStructBegin('StreamController_stopRecord_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_stopRecord_result = function(args) {
  this.ie = null;
  this.pe = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProtocolException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
cn.ac.trimps.liproxy.service.StreamController_stopRecord_result.prototype = {};
cn.ac.trimps.liproxy.service.StreamController_stopRecord_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new cn.ac.trimps.liproxy.service.ProtocolException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamController_stopRecord_result.prototype.write = function(output) {
  output.writeStructBegin('StreamController_stopRecord_result');
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 2);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.StreamControllerClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
cn.ac.trimps.liproxy.service.StreamControllerClient.prototype = {};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.bind = function(handler, address, port, mode, callback) {
  this.send_bind(handler, address, port, mode, callback); 
  if (!callback) {
    return this.recv_bind();
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.send_bind = function(handler, address, port, mode, callback) {
  var params = {
    handler: handler,
    address: address,
    port: port,
    mode: mode
  };
  var args = new cn.ac.trimps.liproxy.service.StreamController_bind_args(params);
  try {
    this.output.writeMessageBegin('bind', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_bind();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.recv_bind = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.StreamController_bind_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'bind failed: unknown result';
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.play = function(handler, callback) {
  this.send_play(handler, callback); 
  if (!callback) {
  this.recv_play();
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.send_play = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.StreamController_play_args(params);
  try {
    this.output.writeMessageBegin('play', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_play();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.recv_play = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.StreamController_play_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.pye) {
    throw result.pye;
  }
  if (null !== result.ple) {
    throw result.ple;
  }
  return;
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.playback = function(handler, startTime, endTime, callback) {
  this.send_playback(handler, startTime, endTime, callback); 
  if (!callback) {
  this.recv_playback();
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.send_playback = function(handler, startTime, endTime, callback) {
  var params = {
    handler: handler,
    startTime: startTime,
    endTime: endTime
  };
  var args = new cn.ac.trimps.liproxy.service.StreamController_playback_args(params);
  try {
    this.output.writeMessageBegin('playback', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_playback();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.recv_playback = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.StreamController_playback_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.pye) {
    throw result.pye;
  }
  if (null !== result.ple) {
    throw result.ple;
  }
  return;
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.download = function(handler, startTime, endTime, downloadspeed, callback) {
  this.send_download(handler, startTime, endTime, downloadspeed, callback); 
  if (!callback) {
  this.recv_download();
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.send_download = function(handler, startTime, endTime, downloadspeed, callback) {
  var params = {
    handler: handler,
    startTime: startTime,
    endTime: endTime,
    downloadspeed: downloadspeed
  };
  var args = new cn.ac.trimps.liproxy.service.StreamController_download_args(params);
  try {
    this.output.writeMessageBegin('download', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_download();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.recv_download = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.StreamController_download_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.pye) {
    throw result.pye;
  }
  if (null !== result.ple) {
    throw result.ple;
  }
  return;
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.queryRecord = function(handler, startTime, endTime, callback) {
  this.send_queryRecord(handler, startTime, endTime, callback); 
  if (!callback) {
    return this.recv_queryRecord();
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.send_queryRecord = function(handler, startTime, endTime, callback) {
  var params = {
    handler: handler,
    startTime: startTime,
    endTime: endTime
  };
  var args = new cn.ac.trimps.liproxy.service.StreamController_queryRecord_args(params);
  try {
    this.output.writeMessageBegin('queryRecord', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_queryRecord();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.recv_queryRecord = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.StreamController_queryRecord_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.pye) {
    throw result.pye;
  }
  if (null !== result.ple) {
    throw result.ple;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'queryRecord failed: unknown result';
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.stop = function(handler, callback) {
  this.send_stop(handler, callback); 
  if (!callback) {
  this.recv_stop();
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.send_stop = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.StreamController_stop_args(params);
  try {
    this.output.writeMessageBegin('stop', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_stop();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.recv_stop = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.StreamController_stop_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.pe) {
    throw result.pe;
  }
  return;
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.pause = function(handler, callback) {
  this.send_pause(handler, callback); 
  if (!callback) {
  this.recv_pause();
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.send_pause = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.StreamController_pause_args(params);
  try {
    this.output.writeMessageBegin('pause', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_pause();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.recv_pause = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.StreamController_pause_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.pe) {
    throw result.pe;
  }
  return;
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.resume = function(handler, callback) {
  this.send_resume(handler, callback); 
  if (!callback) {
  this.recv_resume();
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.send_resume = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.StreamController_resume_args(params);
  try {
    this.output.writeMessageBegin('resume', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_resume();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.recv_resume = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.StreamController_resume_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.pe) {
    throw result.pe;
  }
  return;
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.broadcast = function(handler, filename, callback) {
  this.send_broadcast(handler, filename, callback); 
  if (!callback) {
  this.recv_broadcast();
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.send_broadcast = function(handler, filename, callback) {
  var params = {
    handler: handler,
    filename: filename
  };
  var args = new cn.ac.trimps.liproxy.service.StreamController_broadcast_args(params);
  try {
    this.output.writeMessageBegin('broadcast', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_broadcast();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.recv_broadcast = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.StreamController_broadcast_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.pe) {
    throw result.pe;
  }
  return;
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.setScale = function(handler, scale, callback) {
  this.send_setScale(handler, scale, callback); 
  if (!callback) {
  this.recv_setScale();
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.send_setScale = function(handler, scale, callback) {
  var params = {
    handler: handler,
    scale: scale
  };
  var args = new cn.ac.trimps.liproxy.service.StreamController_setScale_args(params);
  try {
    this.output.writeMessageBegin('setScale', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setScale();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.recv_setScale = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.StreamController_setScale_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.pe) {
    throw result.pe;
  }
  return;
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.setRange = function(handler, range, callback) {
  this.send_setRange(handler, range, callback); 
  if (!callback) {
  this.recv_setRange();
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.send_setRange = function(handler, range, callback) {
  var params = {
    handler: handler,
    range: range
  };
  var args = new cn.ac.trimps.liproxy.service.StreamController_setRange_args(params);
  try {
    this.output.writeMessageBegin('setRange', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setRange();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.recv_setRange = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.StreamController_setRange_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.pe) {
    throw result.pe;
  }
  return;
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.sendIFrame = function(handler, callback) {
  this.send_sendIFrame(handler, callback); 
  if (!callback) {
  this.recv_sendIFrame();
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.send_sendIFrame = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.StreamController_sendIFrame_args(params);
  try {
    this.output.writeMessageBegin('sendIFrame', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_sendIFrame();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.recv_sendIFrame = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.StreamController_sendIFrame_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.pe) {
    throw result.pe;
  }
  return;
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.startRecord = function(handler, callback) {
  this.send_startRecord(handler, callback); 
  if (!callback) {
  this.recv_startRecord();
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.send_startRecord = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.StreamController_startRecord_args(params);
  try {
    this.output.writeMessageBegin('startRecord', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_startRecord();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.recv_startRecord = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.StreamController_startRecord_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.pe) {
    throw result.pe;
  }
  return;
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.stopRecord = function(handler, callback) {
  this.send_stopRecord(handler, callback); 
  if (!callback) {
  this.recv_stopRecord();
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.send_stopRecord = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.StreamController_stopRecord_args(params);
  try {
    this.output.writeMessageBegin('stopRecord', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_stopRecord();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.StreamControllerClient.prototype.recv_stopRecord = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.StreamController_stopRecord_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.pe) {
    throw result.pe;
  }
  return;
};
