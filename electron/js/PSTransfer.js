//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

cn.ac.trimps.simedia.transfer.PSTransfer_start_args = function(args) {
  this.presenterIp = null;
  this.presenterPort = null;
  this.sourceUrl = null;
  if (args) {
    if (args.presenterIp !== undefined && args.presenterIp !== null) {
      this.presenterIp = args.presenterIp;
    }
    if (args.presenterPort !== undefined && args.presenterPort !== null) {
      this.presenterPort = args.presenterPort;
    }
    if (args.sourceUrl !== undefined && args.sourceUrl !== null) {
      this.sourceUrl = args.sourceUrl;
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_start_args.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_start_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.presenterIp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.presenterPort = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sourceUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_start_args.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_start_args');
  if (this.presenterIp !== null && this.presenterIp !== undefined) {
    output.writeFieldBegin('presenterIp', Thrift.Type.STRING, 1);
    output.writeString(this.presenterIp);
    output.writeFieldEnd();
  }
  if (this.presenterPort !== null && this.presenterPort !== undefined) {
    output.writeFieldBegin('presenterPort', Thrift.Type.I32, 2);
    output.writeI32(this.presenterPort);
    output.writeFieldEnd();
  }
  if (this.sourceUrl !== null && this.sourceUrl !== undefined) {
    output.writeFieldBegin('sourceUrl', Thrift.Type.STRING, 3);
    output.writeString(this.sourceUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_start_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new cn.ac.trimps.simedia.transfer.Handler(args.success);
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_start_result.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_start_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new cn.ac.trimps.simedia.transfer.Handler();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_start_result.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_start_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_stop_args = function(args) {
  this.handle = null;
  if (args) {
    if (args.handle !== undefined && args.handle !== null) {
      this.handle = new cn.ac.trimps.simedia.transfer.Handler(args.handle);
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_stop_args.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_stop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handle = new cn.ac.trimps.simedia.transfer.Handler();
        this.handle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_stop_args.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_stop_args');
  if (this.handle !== null && this.handle !== undefined) {
    output.writeFieldBegin('handle', Thrift.Type.STRUCT, 1);
    this.handle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_stop_result = function(args) {
};
cn.ac.trimps.simedia.transfer.PSTransfer_stop_result.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_stop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_stop_result.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_stop_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_setScale_args = function(args) {
  this.handle = null;
  this.scale = null;
  if (args) {
    if (args.handle !== undefined && args.handle !== null) {
      this.handle = new cn.ac.trimps.simedia.transfer.Handler(args.handle);
    }
    if (args.scale !== undefined && args.scale !== null) {
      this.scale = args.scale;
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_setScale_args.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_setScale_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handle = new cn.ac.trimps.simedia.transfer.Handler();
        this.handle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.scale = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_setScale_args.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_setScale_args');
  if (this.handle !== null && this.handle !== undefined) {
    output.writeFieldBegin('handle', Thrift.Type.STRUCT, 1);
    this.handle.write(output);
    output.writeFieldEnd();
  }
  if (this.scale !== null && this.scale !== undefined) {
    output.writeFieldBegin('scale', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.scale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_setScale_result = function(args) {
};
cn.ac.trimps.simedia.transfer.PSTransfer_setScale_result.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_setScale_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_setScale_result.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_setScale_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_pause_args = function(args) {
  this.handle = null;
  if (args) {
    if (args.handle !== undefined && args.handle !== null) {
      this.handle = new cn.ac.trimps.simedia.transfer.Handler(args.handle);
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_pause_args.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_pause_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handle = new cn.ac.trimps.simedia.transfer.Handler();
        this.handle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_pause_args.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_pause_args');
  if (this.handle !== null && this.handle !== undefined) {
    output.writeFieldBegin('handle', Thrift.Type.STRUCT, 1);
    this.handle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_pause_result = function(args) {
};
cn.ac.trimps.simedia.transfer.PSTransfer_pause_result.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_pause_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_pause_result.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_pause_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_resume_args = function(args) {
  this.handle = null;
  if (args) {
    if (args.handle !== undefined && args.handle !== null) {
      this.handle = new cn.ac.trimps.simedia.transfer.Handler(args.handle);
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_resume_args.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_resume_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handle = new cn.ac.trimps.simedia.transfer.Handler();
        this.handle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_resume_args.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_resume_args');
  if (this.handle !== null && this.handle !== undefined) {
    output.writeFieldBegin('handle', Thrift.Type.STRUCT, 1);
    this.handle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_resume_result = function(args) {
};
cn.ac.trimps.simedia.transfer.PSTransfer_resume_result.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_resume_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_resume_result.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_resume_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getPicture_args = function(args) {
  this.handle = null;
  this.timestamp = null;
  if (args) {
    if (args.handle !== undefined && args.handle !== null) {
      this.handle = new cn.ac.trimps.simedia.transfer.Handler(args.handle);
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_getPicture_args.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_getPicture_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handle = new cn.ac.trimps.simedia.transfer.Handler();
        this.handle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.timestamp = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getPicture_args.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_getPicture_args');
  if (this.handle !== null && this.handle !== undefined) {
    output.writeFieldBegin('handle', Thrift.Type.STRUCT, 1);
    this.handle.write(output);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getPicture_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_getPicture_result.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_getPicture_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getPicture_result.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_getPicture_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getSinkAddress_args = function(args) {
};
cn.ac.trimps.simedia.transfer.PSTransfer_getSinkAddress_args.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_getSinkAddress_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getSinkAddress_args.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_getSinkAddress_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getSinkAddress_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_getSinkAddress_result.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_getSinkAddress_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getSinkAddress_result.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_getSinkAddress_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrl_args = function(args) {
  this.deviceId = null;
  this.starttime = null;
  this.endtime = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.starttime !== undefined && args.starttime !== null) {
      this.starttime = new cn.ac.trimps.simedia.transfer.DateTime(args.starttime);
    }
    if (args.endtime !== undefined && args.endtime !== null) {
      this.endtime = new cn.ac.trimps.simedia.transfer.DateTime(args.endtime);
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrl_args.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrl_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.starttime = new cn.ac.trimps.simedia.transfer.DateTime();
        this.starttime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.endtime = new cn.ac.trimps.simedia.transfer.DateTime();
        this.endtime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrl_args.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_getVideoUrl_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.STRING, 1);
    output.writeString(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.starttime !== null && this.starttime !== undefined) {
    output.writeFieldBegin('starttime', Thrift.Type.STRUCT, 2);
    this.starttime.write(output);
    output.writeFieldEnd();
  }
  if (this.endtime !== null && this.endtime !== undefined) {
    output.writeFieldBegin('endtime', Thrift.Type.STRUCT, 3);
    this.endtime.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrl_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrl_result.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrl_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrl_result.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_getVideoUrl_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrlByAlarmId_args = function(args) {
  this.alarmId = null;
  if (args) {
    if (args.alarmId !== undefined && args.alarmId !== null) {
      this.alarmId = args.alarmId;
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrlByAlarmId_args.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrlByAlarmId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.alarmId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrlByAlarmId_args.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_getVideoUrlByAlarmId_args');
  if (this.alarmId !== null && this.alarmId !== undefined) {
    output.writeFieldBegin('alarmId', Thrift.Type.STRING, 1);
    output.writeString(this.alarmId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrlByAlarmId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrlByAlarmId_result.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrlByAlarmId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrlByAlarmId_result.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_getVideoUrlByAlarmId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getAudioUrlByAlarmId_args = function(args) {
  this.alarmId = null;
  if (args) {
    if (args.alarmId !== undefined && args.alarmId !== null) {
      this.alarmId = args.alarmId;
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_getAudioUrlByAlarmId_args.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_getAudioUrlByAlarmId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.alarmId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getAudioUrlByAlarmId_args.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_getAudioUrlByAlarmId_args');
  if (this.alarmId !== null && this.alarmId !== undefined) {
    output.writeFieldBegin('alarmId', Thrift.Type.STRING, 1);
    output.writeString(this.alarmId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getAudioUrlByAlarmId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_getAudioUrlByAlarmId_result.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_getAudioUrlByAlarmId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getAudioUrlByAlarmId_result.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_getAudioUrlByAlarmId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getPts_args = function(args) {
  this.handle = null;
  if (args) {
    if (args.handle !== undefined && args.handle !== null) {
      this.handle = new cn.ac.trimps.simedia.transfer.Handler(args.handle);
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_getPts_args.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_getPts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handle = new cn.ac.trimps.simedia.transfer.Handler();
        this.handle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getPts_args.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_getPts_args');
  if (this.handle !== null && this.handle !== undefined) {
    output.writeFieldBegin('handle', Thrift.Type.STRUCT, 1);
    this.handle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getPts_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_getPts_result.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_getPts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getPts_result.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_getPts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_setPts_args = function(args) {
  this.handle = null;
  this.pts = null;
  if (args) {
    if (args.handle !== undefined && args.handle !== null) {
      this.handle = new cn.ac.trimps.simedia.transfer.Handler(args.handle);
    }
    if (args.pts !== undefined && args.pts !== null) {
      this.pts = args.pts;
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_setPts_args.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_setPts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handle = new cn.ac.trimps.simedia.transfer.Handler();
        this.handle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.pts = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_setPts_args.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_setPts_args');
  if (this.handle !== null && this.handle !== undefined) {
    output.writeFieldBegin('handle', Thrift.Type.STRUCT, 1);
    this.handle.write(output);
    output.writeFieldEnd();
  }
  if (this.pts !== null && this.pts !== undefined) {
    output.writeFieldBegin('pts', Thrift.Type.I64, 2);
    output.writeI64(this.pts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_setPts_result = function(args) {
};
cn.ac.trimps.simedia.transfer.PSTransfer_setPts_result.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_setPts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_setPts_result.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_setPts_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getState_args = function(args) {
  this.handle = null;
  if (args) {
    if (args.handle !== undefined && args.handle !== null) {
      this.handle = new cn.ac.trimps.simedia.transfer.Handler(args.handle);
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_getState_args.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_getState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handle = new cn.ac.trimps.simedia.transfer.Handler();
        this.handle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getState_args.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_getState_args');
  if (this.handle !== null && this.handle !== undefined) {
    output.writeFieldBegin('handle', Thrift.Type.STRUCT, 1);
    this.handle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getState_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new cn.ac.trimps.simedia.transfer.State(args.success);
    }
  }
};
cn.ac.trimps.simedia.transfer.PSTransfer_getState_result.prototype = {};
cn.ac.trimps.simedia.transfer.PSTransfer_getState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new cn.ac.trimps.simedia.transfer.State();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransfer_getState_result.prototype.write = function(output) {
  output.writeStructBegin('PSTransfer_getState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.PSTransferClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
cn.ac.trimps.simedia.transfer.PSTransferClient.prototype = {};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.start = function(presenterIp, presenterPort, sourceUrl, callback) {
  this.send_start(presenterIp, presenterPort, sourceUrl, callback); 
  if (!callback) {
    return this.recv_start();
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.send_start = function(presenterIp, presenterPort, sourceUrl, callback) {
  var params = {
    presenterIp: presenterIp,
    presenterPort: presenterPort,
    sourceUrl: sourceUrl
  };
  var args = new cn.ac.trimps.simedia.transfer.PSTransfer_start_args(params);
  try {
    this.output.writeMessageBegin('start', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_start();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.recv_start = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.simedia.transfer.PSTransfer_start_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'start failed: unknown result';
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.stop = function(handle, callback) {
  this.send_stop(handle, callback); 
  if (!callback) {
  this.recv_stop();
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.send_stop = function(handle, callback) {
  var params = {
    handle: handle
  };
  var args = new cn.ac.trimps.simedia.transfer.PSTransfer_stop_args(params);
  try {
    this.output.writeMessageBegin('stop', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_stop();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.recv_stop = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.simedia.transfer.PSTransfer_stop_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.setScale = function(handle, scale, callback) {
  this.send_setScale(handle, scale, callback); 
  if (!callback) {
  this.recv_setScale();
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.send_setScale = function(handle, scale, callback) {
  var params = {
    handle: handle,
    scale: scale
  };
  var args = new cn.ac.trimps.simedia.transfer.PSTransfer_setScale_args(params);
  try {
    this.output.writeMessageBegin('setScale', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setScale();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.recv_setScale = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.simedia.transfer.PSTransfer_setScale_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.pause = function(handle, callback) {
  this.send_pause(handle, callback); 
  if (!callback) {
  this.recv_pause();
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.send_pause = function(handle, callback) {
  var params = {
    handle: handle
  };
  var args = new cn.ac.trimps.simedia.transfer.PSTransfer_pause_args(params);
  try {
    this.output.writeMessageBegin('pause', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_pause();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.recv_pause = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.simedia.transfer.PSTransfer_pause_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.resume = function(handle, callback) {
  this.send_resume(handle, callback); 
  if (!callback) {
  this.recv_resume();
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.send_resume = function(handle, callback) {
  var params = {
    handle: handle
  };
  var args = new cn.ac.trimps.simedia.transfer.PSTransfer_resume_args(params);
  try {
    this.output.writeMessageBegin('resume', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_resume();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.recv_resume = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.simedia.transfer.PSTransfer_resume_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.getPicture = function(handle, timestamp, callback) {
  this.send_getPicture(handle, timestamp, callback); 
  if (!callback) {
    return this.recv_getPicture();
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.send_getPicture = function(handle, timestamp, callback) {
  var params = {
    handle: handle,
    timestamp: timestamp
  };
  var args = new cn.ac.trimps.simedia.transfer.PSTransfer_getPicture_args(params);
  try {
    this.output.writeMessageBegin('getPicture', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPicture();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.recv_getPicture = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.simedia.transfer.PSTransfer_getPicture_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getPicture failed: unknown result';
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.getSinkAddress = function(callback) {
  this.send_getSinkAddress(callback); 
  if (!callback) {
    return this.recv_getSinkAddress();
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.send_getSinkAddress = function(callback) {
  var args = new cn.ac.trimps.simedia.transfer.PSTransfer_getSinkAddress_args();
  try {
    this.output.writeMessageBegin('getSinkAddress', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getSinkAddress();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.recv_getSinkAddress = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.simedia.transfer.PSTransfer_getSinkAddress_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getSinkAddress failed: unknown result';
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.getVideoUrl = function(deviceId, starttime, endtime, callback) {
  this.send_getVideoUrl(deviceId, starttime, endtime, callback); 
  if (!callback) {
    return this.recv_getVideoUrl();
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.send_getVideoUrl = function(deviceId, starttime, endtime, callback) {
  var params = {
    deviceId: deviceId,
    starttime: starttime,
    endtime: endtime
  };
  var args = new cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrl_args(params);
  try {
    this.output.writeMessageBegin('getVideoUrl', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getVideoUrl();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.recv_getVideoUrl = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrl_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getVideoUrl failed: unknown result';
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.getVideoUrlByAlarmId = function(alarmId, callback) {
  this.send_getVideoUrlByAlarmId(alarmId, callback); 
  if (!callback) {
    return this.recv_getVideoUrlByAlarmId();
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.send_getVideoUrlByAlarmId = function(alarmId, callback) {
  var params = {
    alarmId: alarmId
  };
  var args = new cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrlByAlarmId_args(params);
  try {
    this.output.writeMessageBegin('getVideoUrlByAlarmId', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getVideoUrlByAlarmId();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.recv_getVideoUrlByAlarmId = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.simedia.transfer.PSTransfer_getVideoUrlByAlarmId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getVideoUrlByAlarmId failed: unknown result';
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.getAudioUrlByAlarmId = function(alarmId, callback) {
  this.send_getAudioUrlByAlarmId(alarmId, callback); 
  if (!callback) {
    return this.recv_getAudioUrlByAlarmId();
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.send_getAudioUrlByAlarmId = function(alarmId, callback) {
  var params = {
    alarmId: alarmId
  };
  var args = new cn.ac.trimps.simedia.transfer.PSTransfer_getAudioUrlByAlarmId_args(params);
  try {
    this.output.writeMessageBegin('getAudioUrlByAlarmId', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getAudioUrlByAlarmId();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.recv_getAudioUrlByAlarmId = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.simedia.transfer.PSTransfer_getAudioUrlByAlarmId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getAudioUrlByAlarmId failed: unknown result';
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.getPts = function(handle, callback) {
  this.send_getPts(handle, callback); 
  if (!callback) {
    return this.recv_getPts();
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.send_getPts = function(handle, callback) {
  var params = {
    handle: handle
  };
  var args = new cn.ac.trimps.simedia.transfer.PSTransfer_getPts_args(params);
  try {
    this.output.writeMessageBegin('getPts', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPts();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.recv_getPts = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.simedia.transfer.PSTransfer_getPts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getPts failed: unknown result';
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.setPts = function(handle, pts, callback) {
  this.send_setPts(handle, pts, callback); 
  if (!callback) {
  this.recv_setPts();
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.send_setPts = function(handle, pts, callback) {
  var params = {
    handle: handle,
    pts: pts
  };
  var args = new cn.ac.trimps.simedia.transfer.PSTransfer_setPts_args(params);
  try {
    this.output.writeMessageBegin('setPts', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setPts();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.recv_setPts = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.simedia.transfer.PSTransfer_setPts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.getState = function(handle, callback) {
  this.send_getState(handle, callback); 
  if (!callback) {
    return this.recv_getState();
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.send_getState = function(handle, callback) {
  var params = {
    handle: handle
  };
  var args = new cn.ac.trimps.simedia.transfer.PSTransfer_getState_args(params);
  try {
    this.output.writeMessageBegin('getState', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getState();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.simedia.transfer.PSTransferClient.prototype.recv_getState = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.simedia.transfer.PSTransfer_getState_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getState failed: unknown result';
};
