//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

cn.ac.trimps.liproxy.service.LiProxy_open_args = function(args) {
  this.deviceId = null;
  this.timeout = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
    if (args.timeout !== undefined && args.timeout !== null) {
      this.timeout = args.timeout;
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_open_args.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_open_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timeout = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_open_args.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_open_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.STRING, 1);
    output.writeString(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.timeout !== null && this.timeout !== undefined) {
    output.writeFieldBegin('timeout', Thrift.Type.I32, 2);
    output.writeI32(this.timeout);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_open_result = function(args) {
  this.success = null;
  this.ie = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new cn.ac.trimps.liproxy.service.Handler(args.success);
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_open_result.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_open_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new cn.ac.trimps.liproxy.service.Handler();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_open_result.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_open_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_close_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_close_args.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_close_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_close_args.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_close_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_close_result = function(args) {
  this.ie = null;
  this.pe = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProxyException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_close_result.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_close_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new cn.ac.trimps.liproxy.service.ProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_close_result.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_close_result');
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 2);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_keepAlive_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_keepAlive_args.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_keepAlive_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_keepAlive_args.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_keepAlive_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_keepAlive_result = function(args) {
  this.success = null;
  this.ie = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_keepAlive_result.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_keepAlive_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_keepAlive_result.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_keepAlive_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_getCatalog_args = function(args) {
  this.serverId = null;
  this.offset = null;
  this.limit = null;
  this.charset = null;
  if (args) {
    if (args.serverId !== undefined && args.serverId !== null) {
      this.serverId = args.serverId;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.charset !== undefined && args.charset !== null) {
      this.charset = args.charset;
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_getCatalog_args.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_getCatalog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serverId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.charset = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_getCatalog_args.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_getCatalog_args');
  if (this.serverId !== null && this.serverId !== undefined) {
    output.writeFieldBegin('serverId', Thrift.Type.STRING, 1);
    output.writeString(this.serverId);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 2);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 3);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  if (this.charset !== null && this.charset !== undefined) {
    output.writeFieldBegin('charset', Thrift.Type.STRING, 4);
    output.writeString(this.charset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_getCatalog_result = function(args) {
  this.success = null;
  this.ie = null;
  this.pe = null;
  if (args instanceof cn.ac.trimps.liproxy.service.InvalidArgumentException) {
    this.ie = args;
    return;
  }
  if (args instanceof cn.ac.trimps.liproxy.service.ProtocolException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_getCatalog_result.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_getCatalog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new cn.ac.trimps.liproxy.service.InvalidArgumentException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new cn.ac.trimps.liproxy.service.ProtocolException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_getCatalog_result.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_getCatalog_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 1);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 2);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_updateDevice_args = function(args) {
  this.item = null;
  if (args) {
    if (args.item !== undefined && args.item !== null) {
      this.item = new cn.ac.trimps.liproxy.service.DeviceItem(args.item);
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_updateDevice_args.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_updateDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.item = new cn.ac.trimps.liproxy.service.DeviceItem();
        this.item.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_updateDevice_args.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_updateDevice_args');
  if (this.item !== null && this.item !== undefined) {
    output.writeFieldBegin('item', Thrift.Type.STRUCT, 1);
    this.item.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_updateDevice_result = function(args) {
};
cn.ac.trimps.liproxy.service.LiProxy_updateDevice_result.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_updateDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_updateDevice_result.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_updateDevice_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_removeDevice_args = function(args) {
  this.deviceId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_removeDevice_args.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_removeDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_removeDevice_args.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_removeDevice_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.STRING, 1);
    output.writeString(this.deviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_removeDevice_result = function(args) {
};
cn.ac.trimps.liproxy.service.LiProxy_removeDevice_result.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_removeDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_removeDevice_result.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_removeDevice_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_getDeviceStatus_args = function(args) {
  this.deviceId = null;
  if (args) {
    if (args.deviceId !== undefined && args.deviceId !== null) {
      this.deviceId = args.deviceId;
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_getDeviceStatus_args.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_getDeviceStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_getDeviceStatus_args.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_getDeviceStatus_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.STRING, 1);
    output.writeString(this.deviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_getDeviceStatus_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_getDeviceStatus_result.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_getDeviceStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_getDeviceStatus_result.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_getDeviceStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_setGuard_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_setGuard_args.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_setGuard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_setGuard_args.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_setGuard_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_setGuard_result = function(args) {
};
cn.ac.trimps.liproxy.service.LiProxy_setGuard_result.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_setGuard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_setGuard_result.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_setGuard_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_resetGuard_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_resetGuard_args.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_resetGuard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_resetGuard_args.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_resetGuard_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_resetGuard_result = function(args) {
};
cn.ac.trimps.liproxy.service.LiProxy_resetGuard_result.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_resetGuard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_resetGuard_result.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_resetGuard_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_alarm_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_alarm_args.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_alarm_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_alarm_args.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_alarm_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_alarm_result = function(args) {
};
cn.ac.trimps.liproxy.service.LiProxy_alarm_result.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_alarm_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_alarm_result.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_alarm_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_resetAlarm_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_resetAlarm_args.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_resetAlarm_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_resetAlarm_args.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_resetAlarm_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_resetAlarm_result = function(args) {
};
cn.ac.trimps.liproxy.service.LiProxy_resetAlarm_result.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_resetAlarm_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_resetAlarm_result.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_resetAlarm_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_getDeviceInfo_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_getDeviceInfo_args.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_getDeviceInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_getDeviceInfo_args.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_getDeviceInfo_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_getDeviceInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_getDeviceInfo_result.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_getDeviceInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_getDeviceInfo_result.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_getDeviceInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_getDeviceConfig_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_getDeviceConfig_args.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_getDeviceConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_getDeviceConfig_args.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_getDeviceConfig_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_getDeviceConfig_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_getDeviceConfig_result.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_getDeviceConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_getDeviceConfig_result.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_getDeviceConfig_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_configDevice_args = function(args) {
  this.handler = null;
  this.name = null;
  this.expiration = null;
  this.heartBeatInterval = null;
  this.heartBeatCount = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.expiration !== undefined && args.expiration !== null) {
      this.expiration = args.expiration;
    }
    if (args.heartBeatInterval !== undefined && args.heartBeatInterval !== null) {
      this.heartBeatInterval = args.heartBeatInterval;
    }
    if (args.heartBeatCount !== undefined && args.heartBeatCount !== null) {
      this.heartBeatCount = args.heartBeatCount;
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_configDevice_args.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_configDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.expiration = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.heartBeatInterval = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.heartBeatCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_configDevice_args.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_configDevice_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.expiration !== null && this.expiration !== undefined) {
    output.writeFieldBegin('expiration', Thrift.Type.I32, 3);
    output.writeI32(this.expiration);
    output.writeFieldEnd();
  }
  if (this.heartBeatInterval !== null && this.heartBeatInterval !== undefined) {
    output.writeFieldBegin('heartBeatInterval', Thrift.Type.I32, 4);
    output.writeI32(this.heartBeatInterval);
    output.writeFieldEnd();
  }
  if (this.heartBeatCount !== null && this.heartBeatCount !== undefined) {
    output.writeFieldBegin('heartBeatCount', Thrift.Type.I32, 5);
    output.writeI32(this.heartBeatCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_configDevice_result = function(args) {
};
cn.ac.trimps.liproxy.service.LiProxy_configDevice_result.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_configDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_configDevice_result.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_configDevice_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_subscribeCatalog_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_subscribeCatalog_args.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_subscribeCatalog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_subscribeCatalog_args.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_subscribeCatalog_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_subscribeCatalog_result = function(args) {
};
cn.ac.trimps.liproxy.service.LiProxy_subscribeCatalog_result.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_subscribeCatalog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_subscribeCatalog_result.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_subscribeCatalog_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_subscribeEvent_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.LiProxy_subscribeEvent_args.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_subscribeEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_subscribeEvent_args.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_subscribeEvent_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_subscribeEvent_result = function(args) {
};
cn.ac.trimps.liproxy.service.LiProxy_subscribeEvent_result.prototype = {};
cn.ac.trimps.liproxy.service.LiProxy_subscribeEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxy_subscribeEvent_result.prototype.write = function(output) {
  output.writeStructBegin('LiProxy_subscribeEvent_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.LiProxyClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
cn.ac.trimps.liproxy.service.LiProxyClient.prototype = {};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.open = function(deviceId, timeout, callback) {
  this.send_open(deviceId, timeout, callback); 
  if (!callback) {
    return this.recv_open();
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.send_open = function(deviceId, timeout, callback) {
  var params = {
    deviceId: deviceId,
    timeout: timeout
  };
  var args = new cn.ac.trimps.liproxy.service.LiProxy_open_args(params);
  try {
    this.output.writeMessageBegin('open', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_open();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.recv_open = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.LiProxy_open_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'open failed: unknown result';
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.close = function(handler, callback) {
  this.send_close(handler, callback); 
  if (!callback) {
  this.recv_close();
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.send_close = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.LiProxy_close_args(params);
  try {
    this.output.writeMessageBegin('close', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_close();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.recv_close = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.LiProxy_close_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.pe) {
    throw result.pe;
  }
  return;
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.keepAlive = function(handler, callback) {
  this.send_keepAlive(handler, callback); 
  if (!callback) {
    return this.recv_keepAlive();
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.send_keepAlive = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.LiProxy_keepAlive_args(params);
  try {
    this.output.writeMessageBegin('keepAlive', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_keepAlive();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.recv_keepAlive = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.LiProxy_keepAlive_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'keepAlive failed: unknown result';
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.getCatalog = function(serverId, offset, limit, charset, callback) {
  this.send_getCatalog(serverId, offset, limit, charset, callback); 
  if (!callback) {
    return this.recv_getCatalog();
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.send_getCatalog = function(serverId, offset, limit, charset, callback) {
  var params = {
    serverId: serverId,
    offset: offset,
    limit: limit,
    charset: charset
  };
  var args = new cn.ac.trimps.liproxy.service.LiProxy_getCatalog_args(params);
  try {
    this.output.writeMessageBegin('getCatalog', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getCatalog();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.recv_getCatalog = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.LiProxy_getCatalog_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ie) {
    throw result.ie;
  }
  if (null !== result.pe) {
    throw result.pe;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCatalog failed: unknown result';
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.updateDevice = function(item, callback) {
  this.send_updateDevice(item, callback); 
  if (!callback) {
  this.recv_updateDevice();
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.send_updateDevice = function(item, callback) {
  var params = {
    item: item
  };
  var args = new cn.ac.trimps.liproxy.service.LiProxy_updateDevice_args(params);
  try {
    this.output.writeMessageBegin('updateDevice', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_updateDevice();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.recv_updateDevice = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.LiProxy_updateDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.removeDevice = function(deviceId, callback) {
  this.send_removeDevice(deviceId, callback); 
  if (!callback) {
  this.recv_removeDevice();
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.send_removeDevice = function(deviceId, callback) {
  var params = {
    deviceId: deviceId
  };
  var args = new cn.ac.trimps.liproxy.service.LiProxy_removeDevice_args(params);
  try {
    this.output.writeMessageBegin('removeDevice', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_removeDevice();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.recv_removeDevice = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.LiProxy_removeDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.getDeviceStatus = function(deviceId, callback) {
  this.send_getDeviceStatus(deviceId, callback); 
  if (!callback) {
    return this.recv_getDeviceStatus();
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.send_getDeviceStatus = function(deviceId, callback) {
  var params = {
    deviceId: deviceId
  };
  var args = new cn.ac.trimps.liproxy.service.LiProxy_getDeviceStatus_args(params);
  try {
    this.output.writeMessageBegin('getDeviceStatus', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getDeviceStatus();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.recv_getDeviceStatus = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.LiProxy_getDeviceStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDeviceStatus failed: unknown result';
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.setGuard = function(handler, callback) {
  this.send_setGuard(handler, callback); 
  if (!callback) {
  this.recv_setGuard();
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.send_setGuard = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.LiProxy_setGuard_args(params);
  try {
    this.output.writeMessageBegin('setGuard', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setGuard();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.recv_setGuard = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.LiProxy_setGuard_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.resetGuard = function(handler, callback) {
  this.send_resetGuard(handler, callback); 
  if (!callback) {
  this.recv_resetGuard();
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.send_resetGuard = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.LiProxy_resetGuard_args(params);
  try {
    this.output.writeMessageBegin('resetGuard', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_resetGuard();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.recv_resetGuard = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.LiProxy_resetGuard_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.alarm = function(handler, callback) {
  this.send_alarm(handler, callback); 
  if (!callback) {
  this.recv_alarm();
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.send_alarm = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.LiProxy_alarm_args(params);
  try {
    this.output.writeMessageBegin('alarm', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_alarm();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.recv_alarm = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.LiProxy_alarm_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.resetAlarm = function(handler, callback) {
  this.send_resetAlarm(handler, callback); 
  if (!callback) {
  this.recv_resetAlarm();
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.send_resetAlarm = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.LiProxy_resetAlarm_args(params);
  try {
    this.output.writeMessageBegin('resetAlarm', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_resetAlarm();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.recv_resetAlarm = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.LiProxy_resetAlarm_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.getDeviceInfo = function(handler, callback) {
  this.send_getDeviceInfo(handler, callback); 
  if (!callback) {
    return this.recv_getDeviceInfo();
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.send_getDeviceInfo = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.LiProxy_getDeviceInfo_args(params);
  try {
    this.output.writeMessageBegin('getDeviceInfo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getDeviceInfo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.recv_getDeviceInfo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.LiProxy_getDeviceInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDeviceInfo failed: unknown result';
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.getDeviceConfig = function(handler, callback) {
  this.send_getDeviceConfig(handler, callback); 
  if (!callback) {
    return this.recv_getDeviceConfig();
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.send_getDeviceConfig = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.LiProxy_getDeviceConfig_args(params);
  try {
    this.output.writeMessageBegin('getDeviceConfig', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getDeviceConfig();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.recv_getDeviceConfig = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.LiProxy_getDeviceConfig_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDeviceConfig failed: unknown result';
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.configDevice = function(handler, name, expiration, heartBeatInterval, heartBeatCount, callback) {
  this.send_configDevice(handler, name, expiration, heartBeatInterval, heartBeatCount, callback); 
  if (!callback) {
  this.recv_configDevice();
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.send_configDevice = function(handler, name, expiration, heartBeatInterval, heartBeatCount, callback) {
  var params = {
    handler: handler,
    name: name,
    expiration: expiration,
    heartBeatInterval: heartBeatInterval,
    heartBeatCount: heartBeatCount
  };
  var args = new cn.ac.trimps.liproxy.service.LiProxy_configDevice_args(params);
  try {
    this.output.writeMessageBegin('configDevice', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_configDevice();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.recv_configDevice = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.LiProxy_configDevice_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.subscribeCatalog = function(handler, callback) {
  this.send_subscribeCatalog(handler, callback); 
  if (!callback) {
  this.recv_subscribeCatalog();
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.send_subscribeCatalog = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.LiProxy_subscribeCatalog_args(params);
  try {
    this.output.writeMessageBegin('subscribeCatalog', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_subscribeCatalog();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.recv_subscribeCatalog = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.LiProxy_subscribeCatalog_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.subscribeEvent = function(handler, callback) {
  this.send_subscribeEvent(handler, callback); 
  if (!callback) {
  this.recv_subscribeEvent();
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.send_subscribeEvent = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.LiProxy_subscribeEvent_args(params);
  try {
    this.output.writeMessageBegin('subscribeEvent', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_subscribeEvent();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.LiProxyClient.prototype.recv_subscribeEvent = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.LiProxy_subscribeEvent_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
