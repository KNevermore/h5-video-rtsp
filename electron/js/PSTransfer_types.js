//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof cn === 'undefined') {
  cn = {};
}
if (typeof cn.ac === 'undefined') {
  cn.ac = {};
}
if (typeof cn.ac.trimps === 'undefined') {
  cn.ac.trimps = {};
}
if (typeof cn.ac.trimps.simedia === 'undefined') {
  cn.ac.trimps.simedia = {};
}
if (typeof cn.ac.trimps.simedia.transfer === 'undefined') {
  cn.ac.trimps.simedia.transfer = {};
}
cn.ac.trimps.simedia.transfer.TransferException = function(args) {
  this.errorCode = null;
  this.message = null;
  if (args) {
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(cn.ac.trimps.simedia.transfer.TransferException, Thrift.TException);
cn.ac.trimps.simedia.transfer.TransferException.prototype.name = 'TransferException';
cn.ac.trimps.simedia.transfer.TransferException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.TransferException.prototype.write = function(output) {
  output.writeStructBegin('TransferException');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.InvalidArgumentException = function(args) {
  this.errorCode = null;
  this.message = null;
  if (args) {
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(cn.ac.trimps.simedia.transfer.InvalidArgumentException, Thrift.TException);
cn.ac.trimps.simedia.transfer.InvalidArgumentException.prototype.name = 'InvalidArgumentException';
cn.ac.trimps.simedia.transfer.InvalidArgumentException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.InvalidArgumentException.prototype.write = function(output) {
  output.writeStructBegin('InvalidArgumentException');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.Handler = function(args) {
  this.id = null;
  this.sinkAddress = null;
  this.sinkPort = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.sinkAddress !== undefined && args.sinkAddress !== null) {
      this.sinkAddress = args.sinkAddress;
    }
    if (args.sinkPort !== undefined && args.sinkPort !== null) {
      this.sinkPort = args.sinkPort;
    }
  }
};
cn.ac.trimps.simedia.transfer.Handler.prototype = {};
cn.ac.trimps.simedia.transfer.Handler.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sinkAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sinkPort = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.Handler.prototype.write = function(output) {
  output.writeStructBegin('Handler');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.sinkAddress !== null && this.sinkAddress !== undefined) {
    output.writeFieldBegin('sinkAddress', Thrift.Type.STRING, 2);
    output.writeString(this.sinkAddress);
    output.writeFieldEnd();
  }
  if (this.sinkPort !== null && this.sinkPort !== undefined) {
    output.writeFieldBegin('sinkPort', Thrift.Type.I32, 3);
    output.writeI32(this.sinkPort);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.DateTime = function(args) {
  this.year = null;
  this.month = null;
  this.day = null;
  this.hour = null;
  this.minute = null;
  this.second = null;
  if (args) {
    if (args.year !== undefined && args.year !== null) {
      this.year = args.year;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field year is unset!');
    }
    if (args.month !== undefined && args.month !== null) {
      this.month = args.month;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field month is unset!');
    }
    if (args.day !== undefined && args.day !== null) {
      this.day = args.day;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field day is unset!');
    }
    if (args.hour !== undefined && args.hour !== null) {
      this.hour = args.hour;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hour is unset!');
    }
    if (args.minute !== undefined && args.minute !== null) {
      this.minute = args.minute;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field minute is unset!');
    }
    if (args.second !== undefined && args.second !== null) {
      this.second = args.second;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field second is unset!');
    }
  }
};
cn.ac.trimps.simedia.transfer.DateTime.prototype = {};
cn.ac.trimps.simedia.transfer.DateTime.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.year = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.month = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.day = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.hour = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.minute = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I16) {
        this.second = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.DateTime.prototype.write = function(output) {
  output.writeStructBegin('DateTime');
  if (this.year !== null && this.year !== undefined) {
    output.writeFieldBegin('year', Thrift.Type.I16, 1);
    output.writeI16(this.year);
    output.writeFieldEnd();
  }
  if (this.month !== null && this.month !== undefined) {
    output.writeFieldBegin('month', Thrift.Type.I16, 2);
    output.writeI16(this.month);
    output.writeFieldEnd();
  }
  if (this.day !== null && this.day !== undefined) {
    output.writeFieldBegin('day', Thrift.Type.I16, 3);
    output.writeI16(this.day);
    output.writeFieldEnd();
  }
  if (this.hour !== null && this.hour !== undefined) {
    output.writeFieldBegin('hour', Thrift.Type.I16, 4);
    output.writeI16(this.hour);
    output.writeFieldEnd();
  }
  if (this.minute !== null && this.minute !== undefined) {
    output.writeFieldBegin('minute', Thrift.Type.I16, 5);
    output.writeI16(this.minute);
    output.writeFieldEnd();
  }
  if (this.second !== null && this.second !== undefined) {
    output.writeFieldBegin('second', Thrift.Type.I16, 6);
    output.writeI16(this.second);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.State = function(args) {
  this.retCode = null;
  this.message = null;
  this.pts = null;
  if (args) {
    if (args.retCode !== undefined && args.retCode !== null) {
      this.retCode = args.retCode;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.pts !== undefined && args.pts !== null) {
      this.pts = args.pts;
    }
  }
};
cn.ac.trimps.simedia.transfer.State.prototype = {};
cn.ac.trimps.simedia.transfer.State.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.retCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.pts = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.simedia.transfer.State.prototype.write = function(output) {
  output.writeStructBegin('State');
  if (this.retCode !== null && this.retCode !== undefined) {
    output.writeFieldBegin('retCode', Thrift.Type.I32, 1);
    output.writeI32(this.retCode);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.pts !== null && this.pts !== undefined) {
    output.writeFieldBegin('pts', Thrift.Type.I64, 3);
    output.writeI64(this.pts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

