//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

cn.ac.trimps.simedia.service.SiMedia_openChannel_args = function (args) {
    this.providerId = null;
    this.clientConnection = null;
    this.mode = null;
    this.expiration = null;
    if (args) {
        if (args.providerId !== undefined && args.providerId !== null) {
            this.providerId = args.providerId;
        }
        if (args.clientConnection !== undefined && args.clientConnection !== null) {
            this.clientConnection = new cn.ac.trimps.simedia.service.ChannelClientConnection(args.clientConnection);
        }
        if (args.mode !== undefined && args.mode !== null) {
            this.mode = args.mode;
        }
        if (args.expiration !== undefined && args.expiration !== null) {
            this.expiration = args.expiration;
        }
    }
};
cn.ac.trimps.simedia.service.SiMedia_openChannel_args.prototype = {};
cn.ac.trimps.simedia.service.SiMedia_openChannel_args.prototype.read = function (input) {
    input.readStructBegin();
    while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRING) {
                    this.providerId = input.readString().value;
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.STRUCT) {
                    this.clientConnection = new cn.ac.trimps.simedia.service.ChannelClientConnection();
                    this.clientConnection.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            case 3:
                if (ftype == Thrift.Type.I32) {
                    this.mode = input.readI32().value;
                } else {
                    input.skip(ftype);
                }
                break;
            case 4:
                if (ftype == Thrift.Type.I32) {
                    this.expiration = input.readI32().value;
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

cn.ac.trimps.simedia.service.SiMedia_openChannel_args.prototype.write = function (output) {
    output.writeStructBegin('SiMedia_openChannel_args');
    if (this.providerId !== null && this.providerId !== undefined) {
        output.writeFieldBegin('providerId', Thrift.Type.STRING, 1);
        output.writeString(this.providerId);
        output.writeFieldEnd();
    }
    if (this.clientConnection !== null && this.clientConnection !== undefined) {
        output.writeFieldBegin('clientConnection', Thrift.Type.STRUCT, 2);
        this.clientConnection.write(output);
        output.writeFieldEnd();
    }
    if (this.mode !== null && this.mode !== undefined) {
        output.writeFieldBegin('mode', Thrift.Type.I32, 3);
        output.writeI32(this.mode);
        output.writeFieldEnd();
    }
    if (this.expiration !== null && this.expiration !== undefined) {
        output.writeFieldBegin('expiration', Thrift.Type.I32, 4);
        output.writeI32(this.expiration);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

cn.ac.trimps.simedia.service.SiMedia_openChannel_result = function (args) {
    this.success = null;
    this.error = null;
    if (args instanceof cn.ac.trimps.simedia.service.ChannelException) {
        this.error = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new cn.ac.trimps.simedia.service.Channel(args.success);
        }
        if (args.error !== undefined && args.error !== null) {
            this.error = args.error;
        }
    }
};
cn.ac.trimps.simedia.service.SiMedia_openChannel_result.prototype = {};
cn.ac.trimps.simedia.service.SiMedia_openChannel_result.prototype.read = function (input) {
    input.readStructBegin();
    while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 0:
                if (ftype == Thrift.Type.STRUCT) {
                    this.success = new cn.ac.trimps.simedia.service.Channel();
                    this.success.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            case 1:
                if (ftype == Thrift.Type.STRUCT) {
                    this.error = new cn.ac.trimps.simedia.service.ChannelException();
                    this.error.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

cn.ac.trimps.simedia.service.SiMedia_openChannel_result.prototype.write = function (output) {
    output.writeStructBegin('SiMedia_openChannel_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
        output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
        this.error.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

cn.ac.trimps.simedia.service.SiMedia_closeChannel_args = function (args) {
    this.channel = null;
    if (args) {
        if (args.channel !== undefined && args.channel !== null) {
            this.channel = new cn.ac.trimps.simedia.service.Channel(args.channel);
        }
    }
};
cn.ac.trimps.simedia.service.SiMedia_closeChannel_args.prototype = {};
cn.ac.trimps.simedia.service.SiMedia_closeChannel_args.prototype.read = function (input) {
    input.readStructBegin();
    while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRUCT) {
                    this.channel = new cn.ac.trimps.simedia.service.Channel();
                    this.channel.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            case 0:
                input.skip(ftype);
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

cn.ac.trimps.simedia.service.SiMedia_closeChannel_args.prototype.write = function (output) {
    output.writeStructBegin('SiMedia_closeChannel_args');
    if (this.channel !== null && this.channel !== undefined) {
        output.writeFieldBegin('channel', Thrift.Type.STRUCT, 1);
        this.channel.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

cn.ac.trimps.simedia.service.SiMedia_closeChannel_result = function (args) {
    this.success = null;
    this.error = null;
    if (args instanceof cn.ac.trimps.simedia.service.ChannelException) {
        this.error = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.error !== undefined && args.error !== null) {
            this.error = args.error;
        }
    }
};
cn.ac.trimps.simedia.service.SiMedia_closeChannel_result.prototype = {};
cn.ac.trimps.simedia.service.SiMedia_closeChannel_result.prototype.read = function (input) {
    input.readStructBegin();
    while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 0:
                if (ftype == Thrift.Type.BOOL) {
                    this.success = input.readBool().value;
                } else {
                    input.skip(ftype);
                }
                break;
            case 1:
                if (ftype == Thrift.Type.STRUCT) {
                    this.error = new cn.ac.trimps.simedia.service.ChannelException();
                    this.error.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

cn.ac.trimps.simedia.service.SiMedia_closeChannel_result.prototype.write = function (output) {
    output.writeStructBegin('SiMedia_closeChannel_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
        output.writeBool(this.success);
        output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
        output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
        this.error.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

cn.ac.trimps.simedia.service.SiMedia_isChannelOpened_args = function (args) {
    this.channel = null;
    if (args) {
        if (args.channel !== undefined && args.channel !== null) {
            this.channel = new cn.ac.trimps.simedia.service.Channel(args.channel);
        }
    }
};
cn.ac.trimps.simedia.service.SiMedia_isChannelOpened_args.prototype = {};
cn.ac.trimps.simedia.service.SiMedia_isChannelOpened_args.prototype.read = function (input) {
    input.readStructBegin();
    while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRUCT) {
                    this.channel = new cn.ac.trimps.simedia.service.Channel();
                    this.channel.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            case 0:
                input.skip(ftype);
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

cn.ac.trimps.simedia.service.SiMedia_isChannelOpened_args.prototype.write = function (output) {
    output.writeStructBegin('SiMedia_isChannelOpened_args');
    if (this.channel !== null && this.channel !== undefined) {
        output.writeFieldBegin('channel', Thrift.Type.STRUCT, 1);
        this.channel.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

cn.ac.trimps.simedia.service.SiMedia_isChannelOpened_result = function (args) {
    this.success = null;
    this.error = null;
    if (args instanceof cn.ac.trimps.simedia.service.ChannelException) {
        this.error = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.error !== undefined && args.error !== null) {
            this.error = args.error;
        }
    }
};
cn.ac.trimps.simedia.service.SiMedia_isChannelOpened_result.prototype = {};
cn.ac.trimps.simedia.service.SiMedia_isChannelOpened_result.prototype.read = function (input) {
    input.readStructBegin();
    while (true) {
        var ret = input.readFieldBegin();
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 0:
                if (ftype == Thrift.Type.BOOL) {
                    this.success = input.readBool().value;
                } else {
                    input.skip(ftype);
                }
                break;
            case 1:
                if (ftype == Thrift.Type.STRUCT) {
                    this.error = new cn.ac.trimps.simedia.service.ChannelException();
                    this.error.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

cn.ac.trimps.simedia.service.SiMedia_isChannelOpened_result.prototype.write = function (output) {
    output.writeStructBegin('SiMedia_isChannelOpened_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
        output.writeBool(this.success);
        output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
        output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
        this.error.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

cn.ac.trimps.simedia.service.SiMediaClient = function (input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
cn.ac.trimps.simedia.service.SiMediaClient.prototype = {};

cn.ac.trimps.simedia.service.SiMediaClient.prototype.openChannel = function (providerId, clientConnection, mode, expiration, callback) {
    this.send_openChannel(providerId, clientConnection, mode, expiration, callback);
    if (!callback) {
        return this.recv_openChannel();
    }
};

cn.ac.trimps.simedia.service.SiMediaClient.prototype.send_openChannel = function (providerId, clientConnection, mode, expiration, callback) {
    var params = {
        providerId: providerId,
        clientConnection: clientConnection,
        mode: mode,
        expiration: expiration
    };
    var args = new cn.ac.trimps.simedia.service.SiMedia_openChannel_args(params);
    try {
        this.output.writeMessageBegin('openChannel', Thrift.MessageType.CALL, this.seqid);
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
            var self = this;
            this.output.getTransport().flush(true, function () {
                var result = null;
                try {
                    result = self.recv_openChannel();
                } catch (e) {
                    result = e;
                }
                callback(result);
            });
        } else {
            return this.output.getTransport().flush();
        }
    }
    catch (e) {
        if (typeof this.output.getTransport().reset === 'function') {
            this.output.getTransport().reset();
        }
        throw e;
    }
};

cn.ac.trimps.simedia.service.SiMediaClient.prototype.recv_openChannel = function () {
    var ret = this.input.readMessageBegin();
    var mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(this.input);
        this.input.readMessageEnd();
        throw x;
    }
    var result = new cn.ac.trimps.simedia.service.SiMedia_openChannel_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.error) {
        throw result.error;
    }
    if (null !== result.success) {
        return result.success;
    }
    throw 'openChannel failed: unknown result';
};

cn.ac.trimps.simedia.service.SiMediaClient.prototype.closeChannel = function (channel, callback) {
    this.send_closeChannel(channel, callback);
    if (!callback) {
        return this.recv_closeChannel();
    }
};

cn.ac.trimps.simedia.service.SiMediaClient.prototype.send_closeChannel = function (channel, callback) {
    var params = {
        channel: channel
    };
    var args = new cn.ac.trimps.simedia.service.SiMedia_closeChannel_args(params);
    try {
        this.output.writeMessageBegin('closeChannel', Thrift.MessageType.CALL, this.seqid);
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
            var self = this;
            this.output.getTransport().flush(true, function () {
                var result = null;
                try {
                    result = self.recv_closeChannel();
                } catch (e) {
                    result = e;
                }
                callback(result);
            });
        } else {
            return this.output.getTransport().flush();
        }
    }
    catch (e) {
        if (typeof this.output.getTransport().reset === 'function') {
            this.output.getTransport().reset();
        }
        throw e;
    }
};

cn.ac.trimps.simedia.service.SiMediaClient.prototype.recv_closeChannel = function () {
    var ret = this.input.readMessageBegin();
    var mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(this.input);
        this.input.readMessageEnd();
        throw x;
    }
    var result = new cn.ac.trimps.simedia.service.SiMedia_closeChannel_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.error) {
        throw result.error;
    }
    if (null !== result.success) {
        return result.success;
    }
    throw 'closeChannel failed: unknown result';
};

cn.ac.trimps.simedia.service.SiMediaClient.prototype.isChannelOpened = function (channel, callback) {
    this.send_isChannelOpened(channel, callback);
    if (!callback) {
        return this.recv_isChannelOpened();
    }
};

cn.ac.trimps.simedia.service.SiMediaClient.prototype.send_isChannelOpened = function (channel, callback) {
    var params = {
        channel: channel
    };
    var args = new cn.ac.trimps.simedia.service.SiMedia_isChannelOpened_args(params);
    try {
        this.output.writeMessageBegin('isChannelOpened', Thrift.MessageType.CALL, this.seqid);
        args.write(this.output);
        this.output.writeMessageEnd();
        if (callback) {
            var self = this;
            this.output.getTransport().flush(true, function () {
                var result = null;
                try {
                    result = self.recv_isChannelOpened();
                } catch (e) {
                    result = e;
                }
                callback(result);
            });
        } else {
            return this.output.getTransport().flush();
        }
    }
    catch (e) {
        if (typeof this.output.getTransport().reset === 'function') {
            this.output.getTransport().reset();
        }
        throw e;
    }
};

cn.ac.trimps.simedia.service.SiMediaClient.prototype.recv_isChannelOpened = function () {
    var ret = this.input.readMessageBegin();
    var mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
        var x = new Thrift.TApplicationException();
        x.read(this.input);
        this.input.readMessageEnd();
        throw x;
    }
    var result = new cn.ac.trimps.simedia.service.SiMedia_isChannelOpened_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.error) {
        throw result.error;
    }
    if (null !== result.success) {
        return result.success;
    }
    throw 'isChannelOpened failed: unknown result';
};