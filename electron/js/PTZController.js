//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

cn.ac.trimps.liproxy.service.PTZController_panLeft_args = function(args) {
  this.handler = null;
  this.speed = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.speed !== undefined && args.speed !== null) {
      this.speed = args.speed;
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_panLeft_args.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_panLeft_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.speed = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_panLeft_args.prototype.write = function(output) {
  output.writeStructBegin('PTZController_panLeft_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.speed !== null && this.speed !== undefined) {
    output.writeFieldBegin('speed', Thrift.Type.I32, 2);
    output.writeI32(this.speed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_panLeft_result = function(args) {
};
cn.ac.trimps.liproxy.service.PTZController_panLeft_result.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_panLeft_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_panLeft_result.prototype.write = function(output) {
  output.writeStructBegin('PTZController_panLeft_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_panRight_args = function(args) {
  this.handler = null;
  this.speed = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.speed !== undefined && args.speed !== null) {
      this.speed = args.speed;
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_panRight_args.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_panRight_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.speed = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_panRight_args.prototype.write = function(output) {
  output.writeStructBegin('PTZController_panRight_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.speed !== null && this.speed !== undefined) {
    output.writeFieldBegin('speed', Thrift.Type.I32, 2);
    output.writeI32(this.speed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_panRight_result = function(args) {
};
cn.ac.trimps.liproxy.service.PTZController_panRight_result.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_panRight_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_panRight_result.prototype.write = function(output) {
  output.writeStructBegin('PTZController_panRight_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_tiltUp_args = function(args) {
  this.handler = null;
  this.speed = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.speed !== undefined && args.speed !== null) {
      this.speed = args.speed;
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_tiltUp_args.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_tiltUp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.speed = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_tiltUp_args.prototype.write = function(output) {
  output.writeStructBegin('PTZController_tiltUp_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.speed !== null && this.speed !== undefined) {
    output.writeFieldBegin('speed', Thrift.Type.I32, 2);
    output.writeI32(this.speed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_tiltUp_result = function(args) {
};
cn.ac.trimps.liproxy.service.PTZController_tiltUp_result.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_tiltUp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_tiltUp_result.prototype.write = function(output) {
  output.writeStructBegin('PTZController_tiltUp_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_tiltDown_args = function(args) {
  this.handler = null;
  this.speed = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.speed !== undefined && args.speed !== null) {
      this.speed = args.speed;
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_tiltDown_args.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_tiltDown_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.speed = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_tiltDown_args.prototype.write = function(output) {
  output.writeStructBegin('PTZController_tiltDown_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.speed !== null && this.speed !== undefined) {
    output.writeFieldBegin('speed', Thrift.Type.I32, 2);
    output.writeI32(this.speed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_tiltDown_result = function(args) {
};
cn.ac.trimps.liproxy.service.PTZController_tiltDown_result.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_tiltDown_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_tiltDown_result.prototype.write = function(output) {
  output.writeStructBegin('PTZController_tiltDown_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_zoomIn_args = function(args) {
  this.handler = null;
  this.speed = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.speed !== undefined && args.speed !== null) {
      this.speed = args.speed;
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_zoomIn_args.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_zoomIn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.speed = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_zoomIn_args.prototype.write = function(output) {
  output.writeStructBegin('PTZController_zoomIn_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.speed !== null && this.speed !== undefined) {
    output.writeFieldBegin('speed', Thrift.Type.I32, 2);
    output.writeI32(this.speed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_zoomIn_result = function(args) {
};
cn.ac.trimps.liproxy.service.PTZController_zoomIn_result.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_zoomIn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_zoomIn_result.prototype.write = function(output) {
  output.writeStructBegin('PTZController_zoomIn_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_zoomOut_args = function(args) {
  this.handler = null;
  this.speed = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.speed !== undefined && args.speed !== null) {
      this.speed = args.speed;
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_zoomOut_args.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_zoomOut_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.speed = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_zoomOut_args.prototype.write = function(output) {
  output.writeStructBegin('PTZController_zoomOut_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.speed !== null && this.speed !== undefined) {
    output.writeFieldBegin('speed', Thrift.Type.I32, 2);
    output.writeI32(this.speed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_zoomOut_result = function(args) {
};
cn.ac.trimps.liproxy.service.PTZController_zoomOut_result.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_zoomOut_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_zoomOut_result.prototype.write = function(output) {
  output.writeStructBegin('PTZController_zoomOut_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_invokePreset_args = function(args) {
  this.handler = null;
  this.preset = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.preset !== undefined && args.preset !== null) {
      this.preset = args.preset;
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_invokePreset_args.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_invokePreset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.preset = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_invokePreset_args.prototype.write = function(output) {
  output.writeStructBegin('PTZController_invokePreset_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.preset !== null && this.preset !== undefined) {
    output.writeFieldBegin('preset', Thrift.Type.I16, 2);
    output.writeI16(this.preset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_invokePreset_result = function(args) {
};
cn.ac.trimps.liproxy.service.PTZController_invokePreset_result.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_invokePreset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_invokePreset_result.prototype.write = function(output) {
  output.writeStructBegin('PTZController_invokePreset_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_setPreset_args = function(args) {
  this.handler = null;
  this.preset = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.preset !== undefined && args.preset !== null) {
      this.preset = args.preset;
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_setPreset_args.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_setPreset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.preset = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_setPreset_args.prototype.write = function(output) {
  output.writeStructBegin('PTZController_setPreset_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.preset !== null && this.preset !== undefined) {
    output.writeFieldBegin('preset', Thrift.Type.I16, 2);
    output.writeI16(this.preset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_setPreset_result = function(args) {
};
cn.ac.trimps.liproxy.service.PTZController_setPreset_result.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_setPreset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_setPreset_result.prototype.write = function(output) {
  output.writeStructBegin('PTZController_setPreset_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_deletePreset_args = function(args) {
  this.handler = null;
  this.preset = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.preset !== undefined && args.preset !== null) {
      this.preset = args.preset;
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_deletePreset_args.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_deletePreset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.preset = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_deletePreset_args.prototype.write = function(output) {
  output.writeStructBegin('PTZController_deletePreset_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.preset !== null && this.preset !== undefined) {
    output.writeFieldBegin('preset', Thrift.Type.I16, 2);
    output.writeI16(this.preset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_deletePreset_result = function(args) {
};
cn.ac.trimps.liproxy.service.PTZController_deletePreset_result.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_deletePreset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_deletePreset_result.prototype.write = function(output) {
  output.writeStructBegin('PTZController_deletePreset_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_commit_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_commit_args.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_commit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_commit_args.prototype.write = function(output) {
  output.writeStructBegin('PTZController_commit_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_commit_result = function(args) {
};
cn.ac.trimps.liproxy.service.PTZController_commit_result.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_commit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_commit_result.prototype.write = function(output) {
  output.writeStructBegin('PTZController_commit_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_abort_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_abort_args.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_abort_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_abort_args.prototype.write = function(output) {
  output.writeStructBegin('PTZController_abort_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_abort_result = function(args) {
};
cn.ac.trimps.liproxy.service.PTZController_abort_result.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_abort_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_abort_result.prototype.write = function(output) {
  output.writeStructBegin('PTZController_abort_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_getPanSpeedLimit_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_getPanSpeedLimit_args.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_getPanSpeedLimit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_getPanSpeedLimit_args.prototype.write = function(output) {
  output.writeStructBegin('PTZController_getPanSpeedLimit_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_getPanSpeedLimit_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_getPanSpeedLimit_result.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_getPanSpeedLimit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_getPanSpeedLimit_result.prototype.write = function(output) {
  output.writeStructBegin('PTZController_getPanSpeedLimit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_getTiltSpeedLimit_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_getTiltSpeedLimit_args.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_getTiltSpeedLimit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_getTiltSpeedLimit_args.prototype.write = function(output) {
  output.writeStructBegin('PTZController_getTiltSpeedLimit_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_getTiltSpeedLimit_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_getTiltSpeedLimit_result.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_getTiltSpeedLimit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_getTiltSpeedLimit_result.prototype.write = function(output) {
  output.writeStructBegin('PTZController_getTiltSpeedLimit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_getZoomSpeedLimit_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_getZoomSpeedLimit_args.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_getZoomSpeedLimit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_getZoomSpeedLimit_args.prototype.write = function(output) {
  output.writeStructBegin('PTZController_getZoomSpeedLimit_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_getZoomSpeedLimit_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_getZoomSpeedLimit_result.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_getZoomSpeedLimit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_getZoomSpeedLimit_result.prototype.write = function(output) {
  output.writeStructBegin('PTZController_getZoomSpeedLimit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_setHomePosition_args = function(args) {
  this.handler = null;
  this.enabled = null;
  this.resetTime = null;
  this.presetIndex = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
    if (args.enabled !== undefined && args.enabled !== null) {
      this.enabled = args.enabled;
    }
    if (args.resetTime !== undefined && args.resetTime !== null) {
      this.resetTime = args.resetTime;
    }
    if (args.presetIndex !== undefined && args.presetIndex !== null) {
      this.presetIndex = args.presetIndex;
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_setHomePosition_args.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_setHomePosition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.resetTime = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.presetIndex = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_setHomePosition_args.prototype.write = function(output) {
  output.writeStructBegin('PTZController_setHomePosition_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 2);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  if (this.resetTime !== null && this.resetTime !== undefined) {
    output.writeFieldBegin('resetTime', Thrift.Type.I32, 3);
    output.writeI32(this.resetTime);
    output.writeFieldEnd();
  }
  if (this.presetIndex !== null && this.presetIndex !== undefined) {
    output.writeFieldBegin('presetIndex', Thrift.Type.I16, 4);
    output.writeI16(this.presetIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_setHomePosition_result = function(args) {
};
cn.ac.trimps.liproxy.service.PTZController_setHomePosition_result.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_setHomePosition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_setHomePosition_result.prototype.write = function(output) {
  output.writeStructBegin('PTZController_setHomePosition_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_queryPreset_args = function(args) {
  this.handler = null;
  if (args) {
    if (args.handler !== undefined && args.handler !== null) {
      this.handler = new cn.ac.trimps.liproxy.service.Handler(args.handler);
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_queryPreset_args.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_queryPreset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.handler = new cn.ac.trimps.liproxy.service.Handler();
        this.handler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_queryPreset_args.prototype.write = function(output) {
  output.writeStructBegin('PTZController_queryPreset_args');
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRUCT, 1);
    this.handler.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_queryPreset_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
cn.ac.trimps.liproxy.service.PTZController_queryPreset_result.prototype = {};
cn.ac.trimps.liproxy.service.PTZController_queryPreset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZController_queryPreset_result.prototype.write = function(output) {
  output.writeStructBegin('PTZController_queryPreset_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

cn.ac.trimps.liproxy.service.PTZControllerClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
cn.ac.trimps.liproxy.service.PTZControllerClient.prototype = {};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.panLeft = function(handler, speed, callback) {
  this.send_panLeft(handler, speed, callback); 
  if (!callback) {
  this.recv_panLeft();
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.send_panLeft = function(handler, speed, callback) {
  var params = {
    handler: handler,
    speed: speed
  };
  var args = new cn.ac.trimps.liproxy.service.PTZController_panLeft_args(params);
  try {
    this.output.writeMessageBegin('panLeft', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_panLeft();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.recv_panLeft = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.PTZController_panLeft_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.panRight = function(handler, speed, callback) {
  this.send_panRight(handler, speed, callback); 
  if (!callback) {
  this.recv_panRight();
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.send_panRight = function(handler, speed, callback) {
  var params = {
    handler: handler,
    speed: speed
  };
  var args = new cn.ac.trimps.liproxy.service.PTZController_panRight_args(params);
  try {
    this.output.writeMessageBegin('panRight', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_panRight();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.recv_panRight = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.PTZController_panRight_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.tiltUp = function(handler, speed, callback) {
  this.send_tiltUp(handler, speed, callback); 
  if (!callback) {
  this.recv_tiltUp();
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.send_tiltUp = function(handler, speed, callback) {
  var params = {
    handler: handler,
    speed: speed
  };
  var args = new cn.ac.trimps.liproxy.service.PTZController_tiltUp_args(params);
  try {
    this.output.writeMessageBegin('tiltUp', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_tiltUp();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.recv_tiltUp = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.PTZController_tiltUp_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.tiltDown = function(handler, speed, callback) {
  this.send_tiltDown(handler, speed, callback); 
  if (!callback) {
  this.recv_tiltDown();
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.send_tiltDown = function(handler, speed, callback) {
  var params = {
    handler: handler,
    speed: speed
  };
  var args = new cn.ac.trimps.liproxy.service.PTZController_tiltDown_args(params);
  try {
    this.output.writeMessageBegin('tiltDown', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_tiltDown();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.recv_tiltDown = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.PTZController_tiltDown_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.zoomIn = function(handler, speed, callback) {
  this.send_zoomIn(handler, speed, callback); 
  if (!callback) {
  this.recv_zoomIn();
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.send_zoomIn = function(handler, speed, callback) {
  var params = {
    handler: handler,
    speed: speed
  };
  var args = new cn.ac.trimps.liproxy.service.PTZController_zoomIn_args(params);
  try {
    this.output.writeMessageBegin('zoomIn', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_zoomIn();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.recv_zoomIn = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.PTZController_zoomIn_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.zoomOut = function(handler, speed, callback) {
  this.send_zoomOut(handler, speed, callback); 
  if (!callback) {
  this.recv_zoomOut();
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.send_zoomOut = function(handler, speed, callback) {
  var params = {
    handler: handler,
    speed: speed
  };
  var args = new cn.ac.trimps.liproxy.service.PTZController_zoomOut_args(params);
  try {
    this.output.writeMessageBegin('zoomOut', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_zoomOut();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.recv_zoomOut = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.PTZController_zoomOut_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.invokePreset = function(handler, preset, callback) {
  this.send_invokePreset(handler, preset, callback); 
  if (!callback) {
  this.recv_invokePreset();
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.send_invokePreset = function(handler, preset, callback) {
  var params = {
    handler: handler,
    preset: preset
  };
  var args = new cn.ac.trimps.liproxy.service.PTZController_invokePreset_args(params);
  try {
    this.output.writeMessageBegin('invokePreset', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_invokePreset();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.recv_invokePreset = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.PTZController_invokePreset_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.setPreset = function(handler, preset, callback) {
  this.send_setPreset(handler, preset, callback); 
  if (!callback) {
  this.recv_setPreset();
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.send_setPreset = function(handler, preset, callback) {
  var params = {
    handler: handler,
    preset: preset
  };
  var args = new cn.ac.trimps.liproxy.service.PTZController_setPreset_args(params);
  try {
    this.output.writeMessageBegin('setPreset', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setPreset();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.recv_setPreset = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.PTZController_setPreset_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.deletePreset = function(handler, preset, callback) {
  this.send_deletePreset(handler, preset, callback); 
  if (!callback) {
  this.recv_deletePreset();
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.send_deletePreset = function(handler, preset, callback) {
  var params = {
    handler: handler,
    preset: preset
  };
  var args = new cn.ac.trimps.liproxy.service.PTZController_deletePreset_args(params);
  try {
    this.output.writeMessageBegin('deletePreset', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_deletePreset();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.recv_deletePreset = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.PTZController_deletePreset_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.commit = function(handler, callback) {
  this.send_commit(handler, callback); 
  if (!callback) {
  this.recv_commit();
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.send_commit = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.PTZController_commit_args(params);
  try {
    this.output.writeMessageBegin('commit', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_commit();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.recv_commit = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.PTZController_commit_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.abort = function(handler, callback) {
  this.send_abort(handler, callback); 
  if (!callback) {
  this.recv_abort();
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.send_abort = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.PTZController_abort_args(params);
  try {
    this.output.writeMessageBegin('abort', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_abort();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.recv_abort = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.PTZController_abort_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.getPanSpeedLimit = function(handler, callback) {
  this.send_getPanSpeedLimit(handler, callback); 
  if (!callback) {
    return this.recv_getPanSpeedLimit();
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.send_getPanSpeedLimit = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.PTZController_getPanSpeedLimit_args(params);
  try {
    this.output.writeMessageBegin('getPanSpeedLimit', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPanSpeedLimit();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.recv_getPanSpeedLimit = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.PTZController_getPanSpeedLimit_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getPanSpeedLimit failed: unknown result';
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.getTiltSpeedLimit = function(handler, callback) {
  this.send_getTiltSpeedLimit(handler, callback); 
  if (!callback) {
    return this.recv_getTiltSpeedLimit();
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.send_getTiltSpeedLimit = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.PTZController_getTiltSpeedLimit_args(params);
  try {
    this.output.writeMessageBegin('getTiltSpeedLimit', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getTiltSpeedLimit();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.recv_getTiltSpeedLimit = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.PTZController_getTiltSpeedLimit_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getTiltSpeedLimit failed: unknown result';
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.getZoomSpeedLimit = function(handler, callback) {
  this.send_getZoomSpeedLimit(handler, callback); 
  if (!callback) {
    return this.recv_getZoomSpeedLimit();
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.send_getZoomSpeedLimit = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.PTZController_getZoomSpeedLimit_args(params);
  try {
    this.output.writeMessageBegin('getZoomSpeedLimit', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getZoomSpeedLimit();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.recv_getZoomSpeedLimit = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.PTZController_getZoomSpeedLimit_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getZoomSpeedLimit failed: unknown result';
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.setHomePosition = function(handler, enabled, resetTime, presetIndex, callback) {
  this.send_setHomePosition(handler, enabled, resetTime, presetIndex, callback); 
  if (!callback) {
  this.recv_setHomePosition();
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.send_setHomePosition = function(handler, enabled, resetTime, presetIndex, callback) {
  var params = {
    handler: handler,
    enabled: enabled,
    resetTime: resetTime,
    presetIndex: presetIndex
  };
  var args = new cn.ac.trimps.liproxy.service.PTZController_setHomePosition_args(params);
  try {
    this.output.writeMessageBegin('setHomePosition', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setHomePosition();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.recv_setHomePosition = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.PTZController_setHomePosition_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.queryPreset = function(handler, callback) {
  this.send_queryPreset(handler, callback); 
  if (!callback) {
    return this.recv_queryPreset();
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.send_queryPreset = function(handler, callback) {
  var params = {
    handler: handler
  };
  var args = new cn.ac.trimps.liproxy.service.PTZController_queryPreset_args(params);
  try {
    this.output.writeMessageBegin('queryPreset', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_queryPreset();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

cn.ac.trimps.liproxy.service.PTZControllerClient.prototype.recv_queryPreset = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new cn.ac.trimps.liproxy.service.PTZController_queryPreset_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'queryPreset failed: unknown result';
};
